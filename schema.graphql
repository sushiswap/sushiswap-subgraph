# Search
type _Schema_
  # Token
  @fulltext(
    name: "tokenSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Token", fields: [{ name: "id" }, { name: "name" }, { name: "symbol" }] }]
  )
  # Pair
  @fulltext(
    name: "pairSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Pair", fields: [{ name: "id" }, { name: "name" }] }]
  )
  # User
  @fulltext(name: "userSearch", language: en, algorithm: rank, include: [{ entity: "User", fields: [{ name: "id" }] }])

# MasterChef
type MasterChef @entity {
  # Contract address
  id: ID!

  # Bonus multiplier
  bonusMultiplier: BigInt!

  # Bonus end block
  bonusEndBlock: BigInt!

  # Dev fund address
  devaddr: Bytes!

  # Migrator
  migrator: Bytes!

  # Owner
  owner: Bytes!

  # Start block
  startBlock: BigInt!

  # Sushi
  sushi: Token!

  # Sushi per block
  sushiPerBlock: BigInt!

  # Total allocation point
  totalAllocPoint: BigInt!

  # Pools
  pools: [Pool!]! @derivedFrom(field: "owner")

  # Pool count
  poolCount: BigInt!
}

# Pool
type Pool @entity {
  # Index of pool in poolInfo on MasterChef contract
  id: ID!

  # Owner
  owner: MasterChef!

  # Standard
  pair: Pair!

  # Allocation point
  allocPoint: BigInt!

  # Last reward block
  lastRewardBlock: BigInt!

  # Accumulated sushi per share
  accSushiPerShare: BigInt!

  # Total supply of LP tokens for pool
  totalSupply: BigInt!

  # Pool users
  users: [UserInfo!]! @derivedFrom(field: "pool")

  # Addresses in pool
  addresses: [Bytes!]!

  # User count
  userCount: BigInt!

  # Created at timestamp
  # timestamp: BigInt!

  # Created at block
  # block: BigInt!

  # Average liquidity coin age (ALCA) - Liquidity flow
  # alca: BigInt!

  # Liquidity coindays destroyed SMA (CDSMA) - Liquidity flow
  # cdsma: BigInt!

  # PL/W (Permenent loss/win for pool)
  # Calculated on positions where users have exited

  # VPL/W (Virtual permenent loss/win for pool)
  # Calculated on positions where users have exited and active positions (PL/W + IL/W).
}

# type UserPool {
#   # user address concatenated with pool address
#   id: ID!

#   user: User!
#   pool: pool!

#   amount: BigInt!
#   rewardDebt: BigInt!

#   # Pending Sushi at lockup
#   pendingSushiAtLockup: BigInt!

#   # Harvested Sushi since lockup
#   harvestedSushiSinceLockup: BigInt!

#   # First seen
#   block: Int!
#   timestamp: Int!
# }

type UserInfo @entity {
  # user address concatenated with pool address
  id: ID!

  user: User!
  pool: Pool!

  amount: BigInt!
  rewardDebt: BigInt!

  # Pending Sushi at lockup
  pendingSushiAtLockup: BigInt!

  # Harvested Sushi since lockup
  harvestedSushiSinceLockup: BigInt!

  # First seen
  block: Int!
  timestamp: Int!

  # We do some fancy math here. Basically, any point in time, the amount of SUSHIs
  # entitled to a user but is pending to be distributed is:
  # pending reward = (user.amount * pool.accSushiPerShare) - user.rewardDebt
  # Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:
  # 1. The pool's `accSushiPerShare` (and `lastRewardBlock`) gets updated.
  # 2. User receives the pending reward sent to his/her address.
  # 3. User's `amount` gets updated.
  # 4. User's `rewardDebt` gets updated.
}

type UserBar @entity {
  # ID
  id: ID!

  # User
  user: User!

  # Bar
  bar: Bar!

  # xSushi
  xSushi: BigDecimal!

  # Staked
  staked: BigDecimal!

  # Sum of $ at time of staking
  stakedUSD: BigDecimal!

  # Harvested
  harvested: BigDecimal!

  # Sum of $ at time of harvesting
  harvestedUSD: BigDecimal!

  # To get bar pending sushi (xSushi * staked / bar.totalSupply)
}

# User
type User @entity {
  # TODO: What else do we want to store on the user?
  id: ID!

  # Pools
  pools: [UserInfo!]! @derivedFrom(field: "user")

  # Liquidity Positions
  liquidityPositions: [LiquidityPosition!]! @derivedFrom(field: "user")

  # Set if in the bar, otherwise null
  bar: UserBar
}

# Bar
type Bar @entity {
  # Contract address
  id: ID!

  # Decimals
  decimals: Int!

  # Name
  name: String!

  # Sushi token
  sushi: Token!

  # Symbol
  symbol: String!

  # Total xSushi supply
  totalSupply: BigDecimal!

  # Staked Sushi
  stakedSushi: BigDecimal!

  # Users in the bar
  users: [UserBar!]! @derivedFrom(field: "bar")
}

# type BarPosition @entity {
#   id: ID!
#   user: User!
#   xSushi: BigDecimal!
#   allowance: BigDecimal!
#   share: BigDecimal!
#   staked: BigDecimal!
#   pending: BigDecimal!
#   harvested: BigDecimal!
#   yeild: BigDecimal!
# }

# Maker
type Maker @entity {
  # Contract address
  id: ID!
}

# Bundle
type Bundle @entity {
  id: ID!
  ethPrice: BigDecimal! # price of ETH usd
}

# Factory
type Factory @entity {
  # Contract address
  id: ID!

  # Pair count
  pairCount: BigInt!

  # Volume USD
  volumeUSD: BigDecimal!

  # Volume ETH
  volumeETH: BigDecimal!

  # Untracked volume
  untrackedVolumeUSD: BigDecimal!

  # Liquidity USD
  liquidityUSD: BigDecimal!

  # Liquidity ETH
  liquidityETH: BigDecimal!

  # Transaction count
  txCount: BigInt!

  # Token count
  tokenCount: BigInt!

  # User count
  userCount: BigInt!

  # Pairs
  pairs: [Pair!]! @derivedFrom(field: "factory")

  # Tokens
  tokens: [Token!]! @derivedFrom(field: "factory")

  # Hour data
  hourData: [HourData!]! @derivedFrom(field: "factory")

  # Day data
  dayData: [DayData!]! @derivedFrom(field: "factory")
}

# Hour Data
type HourData @entity {
  # start of hour timestamp
  id: ID!

  # date
  date: Int!

  # factory
  factory: Factory!

  # volume
  volumeETH: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolume: BigDecimal!

  # liquidity
  liquidityETH: BigDecimal!
  liquidityUSD: BigDecimal!

  # tx count
  txCount: BigInt!
}

# Day Data
type DayData @entity {
  # timestamp / 86400
  id: ID!

  # date
  date: Int!

  # factory
  factory: Factory!

  # volume
  volumeETH: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolume: BigDecimal!

  # liquidity
  liquidityETH: BigDecimal!
  liquidityUSD: BigDecimal!

  # tx count
  txCount: BigInt!
}

# Token
type Token @entity {
  # token address
  id: ID!

  # factory
  factory: Factory!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # used for other stats like marketcap
  totalSupply: BigInt!

  # token specific volume
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!

  # transactions across all pairs
  txCount: BigInt!

  # liquidity across all pairs
  liquidity: BigDecimal!

  derivedETH: BigDecimal!

  # Token hour data
  hourData: [TokenHourData!]! @derivedFrom(field: "token")

  # Token day data
  dayData: [TokenDayData!]! @derivedFrom(field: "token")

  # Base pairs
  basePairs: [Pair!]! @derivedFrom(field: "token0")

  # Quote pairs
  quotePairs: [Pair!]! @derivedFrom(field: "token1")

  # Base pairs day data
  basePairsDayData: [PairDayData!]! @derivedFrom(field: "token0")

  # Quote pairs day data
  quotePairsDayData: [PairDayData!]! @derivedFrom(field: "token1")
}

# Token hour data
type TokenHourData @entity {
  # token id - hour start timestamp
  id: ID!

  # date - hour start timestamp
  date: Int!

  # token
  token: Token!

  # volume
  volume: BigDecimal!
  volumeETH: BigDecimal!
  volumeUSD: BigDecimal!

  # tx count
  txCount: BigInt!

  # liquidity
  liquidity: BigDecimal!
  liquidityETH: BigDecimal!
  liquidityUSD: BigDecimal!

  # price usd
  priceUSD: BigDecimal!
}

# Token day data
type TokenDayData @entity {
  # token id - day start timestamp
  id: ID!

  # date - day start timestamp
  date: Int!

  # token
  token: Token!

  # volume
  volume: BigDecimal!
  volumeETH: BigDecimal!
  volumeUSD: BigDecimal!

  # tx count
  txCount: BigInt!

  # liquidity
  liquidity: BigDecimal!
  liquidityETH: BigDecimal!
  liquidityUSD: BigDecimal!

  # price usd
  priceUSD: BigDecimal!
}

# Pair
type Pair @entity {
  # Contract address
  id: ID!

  # Factory
  factory: Factory!

  # Name
  name: String!

  # mirrored from the smart contract
  token0: Token!
  token1: Token!

  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!

  # derived liquidity
  reserveETH: BigDecimal!
  reserveUSD: BigDecimal!

  # used for separating per pair reserves and global
  trackedReserveETH: BigDecimal!

  # Price in terms of the asset pair
  token0Price: BigDecimal!
  token1Price: BigDecimal!

  # lifetime volume stats
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  txCount: BigInt!

  # Fields used to help derived relationship
  # used to detect new exchanges
  liquidityProviderCount: BigInt!

  # lca: BigDecimal!
  # lcad: BigDecimal!

  # Liquidity positions
  liquidityPositions: [LiquidityPosition!]! @derivedFrom(field: "pair")

  # Liquidity position snapshots
  liquidityPositionSnapshots: [LiquidityPositionSnapshot!]! @derivedFrom(field: "pair")

  # Pair day data
  dayData: [PairDayData!]! @derivedFrom(field: "pair")

  # Pair hour data
  hourData: [PairHourData!]! @derivedFrom(field: "pair")

  # Transactions
  mints: [Mint!]! @derivedFrom(field: "pair")
  burns: [Burn!]! @derivedFrom(field: "pair")
  swaps: [Swap!]! @derivedFrom(field: "pair")

  # Created at
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
}

# Pair hour data
type PairHourData @entity {
  # pair.id - hour start timestamp
  id: ID!

  # date - hour start timestamp
  date: Int!

  # pair
  pair: Pair!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!

  # volume usd
  volumeUSD: BigDecimal!

  # tx count
  txCount: BigInt!
}

# Pair day data
type PairDayData @entity {
  # pair id - day start timestamp
  id: ID!

  # date - day start timestamp
  date: Int!

  # pair
  pair: Pair!

  # token0
  token0: Token!

  # token1
  token1: Token!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # total supply for LP historical returns
  totalSupply: BigDecimal!

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!

  # volume usd
  volumeUSD: BigDecimal!

  # tx count
  txCount: BigInt!
}

# liquidity position
type LiquidityPosition @entity {
  id: ID!
  user: User!
  pair: Pair!
  liquidityTokenBalance: BigDecimal!
  snapshots: [LiquidityPositionSnapshot]! @derivedFrom(field: "liquidityPosition")
  block: Int!
  timestamp: Int!

  liquidityTokenMinted: BigDecimal!
  liquidityTokenBurned: BigDecimal!
  lca: BigDecimal!
  lcad: BigDecimal!
  burnCount: BigInt!
  mintCount: BigInt!
  lastBurn: BigInt!
  lastMint: BigInt!
}

# saved over time for return calculations, gets created and never updated
type LiquidityPositionSnapshot @entity {
  id: ID!
  liquidityPosition: LiquidityPosition!
  timestamp: Int! # saved for fast historical lookups
  block: Int! # saved for fast historical lookups
  user: User! # reference to user
  pair: Pair! # reference to pair
  token0PriceUSD: BigDecimal! # snapshot of token0 price
  token1PriceUSD: BigDecimal! # snapshot of token1 price
  reserve0: BigDecimal! # snapshot of pair token0 reserves
  reserve1: BigDecimal! # snapshot of pair token1 reserves
  reserveUSD: BigDecimal! # snapshot of pair reserves in USD
  liquidityTokenTotalSupply: BigDecimal! # snapshot of pool token supply
  # snapshot of users pool token balance
  liquidityTokenBalance: BigDecimal!

  liquidityTokenMinted: BigDecimal!
  liquidityTokenBurned: BigDecimal!
  lca: BigDecimal!
  lcad: BigDecimal!
  burnCount: BigInt!
  mintCount: BigInt!
  lastBurn: BigInt!
  lastMint: BigInt!
}

# transaction
type Transaction @entity {
  # transaction hash
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  # This is not the reverse of Mint.transaction; it is only used to
  # track incomplete mints (similar for burns and swaps)
  mints: [Mint]!
  burns: [Burn]!
  swaps: [Swap]!
}

# mint
type Mint @entity {
  # transaction hash - index of mint in transaction mints array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the primary Transfer event
  to: Bytes!
  liquidity: BigDecimal!

  # populated from the Mint event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

# burn
type Burn @entity {
  # transaction hash - index of burn in transaction burns array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the primary Transfer event
  liquidity: BigDecimal!

  # populated from the Burn event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  to: Bytes
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  # mark uncomplete in ETH case
  complete: Boolean!

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

# swap
type Swap @entity {
  # transaction hash - index of swap in transaction swaps array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the Swap event
  sender: Bytes!
  amount0In: BigDecimal!
  amount1In: BigDecimal!
  amount0Out: BigDecimal!
  amount1Out: BigDecimal!
  to: Bytes!
  logIndex: BigInt

  # derived info
  amountUSD: BigDecimal!
}
